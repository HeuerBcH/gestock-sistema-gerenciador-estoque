Domain Gestock {
    Subdomain Principal
}

ContextMap {
    contains Principal
}

BoundedContext Principal implements Principal {

    Aggregate Cliente {
        Entity Cliente {
            aggregateRoot

            -ClienteId id
            String nome
            String email
            String cnpj
            boolean ativo
            List<EstoqueId> estoques
        }

        ValueObject ClienteId {
            int id
        }

        Repository ClienteRepository {
            Cliente findById(ClienteId id)
            List<Cliente> findAll()
            void save(Cliente cliente)
        }

        Service ClienteService {
            void cadastrarCliente(String nome, String email, String cnpj)
            void ativarCliente(ClienteId id)
            void desativarCliente(ClienteId id)
        }
    }

    Aggregate Estoque {
        Entity Estoque {
            aggregateRoot

            -EstoqueId id
            String nome
            String endereco
            double capacidadeMaxima
            boolean ativo
            ClienteId cliente
            List<ProdutoEstoque> produtos
        }

        ValueObject EstoqueId {
            int id
        }

        ValueObject ProdutoEstoque {
            ProdutoId produto
            double quantidade
        }

        Repository EstoqueRepository {
            Estoque findById(EstoqueId id)
            List<Estoque> findByCliente(ClienteId clienteId)
            void save(Estoque estoque)
        }

        Service EstoqueService {
            void registrarProduto(EstoqueId id, ProdutoId produto, double quantidade)
            void atualizarCapacidade(EstoqueId id, double novaCapacidade)
            void desativarEstoque(EstoqueId id)
        }
    }

    Aggregate Fornecedor {
        Entity Fornecedor {
            aggregateRoot

            -FornecedorId id
            String nome
            String cnpj
            String contato
            int leadTime // em dias
            boolean ativo
            List<Cotacao> cotacoes
        }

        ValueObject FornecedorId {
            int id
        }

        ValueObject Cotacao {
            ProdutoId produto
            double preco
            LocalDate validade
        }

        Repository FornecedorRepository {
            Fornecedor findById(FornecedorId id)
            List<Fornecedor> findAllAtivos()
            void save(Fornecedor fornecedor)
        }

        Service FornecedorService {
            void atualizarCotacao(FornecedorId fornecedor, ProdutoId produto, double preco, LocalDate validade)
            void desativarFornecedor(FornecedorId id)
        }
    }

    Aggregate Produto {
        Entity Produto {
            aggregateRoot

            -ProdutoId id
            String nome
            String descricao
            String unidadeMedida
            boolean ativo
            EstoqueId estoque
            List<FornecedorId> fornecedores
            double pontoRessuprimento
        }

        ValueObject ProdutoId {
            int id
        }

        Repository ProdutoRepository {
            Produto findById(ProdutoId id)
            List<Produto> findAll()
            void save(Produto produto)
        }

        Service ProdutoService {
            void definirPontoRessuprimento(ProdutoId id, double novoPonto)
            void vincularFornecedor(ProdutoId id, FornecedorId fornecedor)
        }
    }

    Aggregate Pedido {
        Entity Pedido {
            aggregateRoot

            -PedidoId id
            ClienteId cliente
            FornecedorId fornecedor
            LocalDate dataCriacao
            LocalDate dataPrevistaEntrega
            PedidoStatus status
            List<ItemPedido> itens
        }

        ValueObject PedidoId {
            int id
        }

        ValueObject ItemPedido {
            ProdutoId produto
            double quantidade
            double precoUnitario
        }

        Enum PedidoStatus {
            PENDENTE,
            EM_TRANSPORTE,
            RECEBIDO,
            CANCELADO
        }

        Repository PedidoRepository {
            Pedido findById(PedidoId id)
            List<Pedido> findByStatus(PedidoStatus status)
            void save(Pedido pedido)
        }

        Service PedidoService {
            void criarPedido(ClienteId cliente, FornecedorId fornecedor, List<ItemPedido> itens)
            void atualizarStatus(PedidoId id, PedidoStatus status)
        }
    }

    Aggregate Movimentacao {
        Entity Movimentacao {
            aggregateRoot

            -MovimentacaoId id
            ProdutoId produto
            EstoqueId estoque
            LocalDateTime dataHora
            TipoMovimentacao tipo
            double quantidade
            String motivo
        }

        ValueObject MovimentacaoId {
            int id
        }

        Enum TipoMovimentacao {
            ENTRADA,
            SAIDA
        }

        Repository MovimentacaoRepository {
            void save(Movimentacao movimentacao)
            List<Movimentacao> findByProduto(ProdutoId produto)
        }

        Service MovimentacaoService {
            void registrarEntrada(ProdutoId produto, EstoqueId estoque, double quantidade)
            void registrarSaida(ProdutoId produto, EstoqueId estoque, double quantidade, String motivo)
        }
    }

    Aggregate Alerta {
        Entity Alerta {
            aggregateRoot

            -AlertaId id
            ProdutoId produto
            EstoqueId estoque
            FornecedorId fornecedorSugerido
            double quantidadeAtual
            double pontoRessuprimento
            boolean ativo
            LocalDateTime dataGeracao
        }

        ValueObject AlertaId {
            int id
        }

        Repository AlertaRepository {
            List<Alerta> findAtivos()
            void save(Alerta alerta)
        }

        Service AlertaService {
            void gerarAlerta(ProdutoId produto, EstoqueId estoque, double quantidadeAtual)
            void resolverAlerta(AlertaId id)
        }
    }

    Aggregate Transferencia {
        Entity Transferencia {
            aggregateRoot

            -TransferenciaId id
            ProdutoId produto
            EstoqueId origem
            EstoqueId destino
            double quantidade
            LocalDateTime dataHora
            StatusTransferencia status
        }

        ValueObject TransferenciaId {
            int id
        }

        Enum StatusTransferencia {
            PENDENTE,
            CONCLUIDA
        }

        Repository TransferenciaRepository {
            void save(Transferencia transferencia)
            List<Transferencia> findByStatus(StatusTransferencia status)
        }

        Service TransferenciaService {
            void iniciarTransferencia(EstoqueId origem, EstoqueId destino, ProdutoId produto, double quantidade)
            void concluirTransferencia(TransferenciaId id)
        }
    }

    Aggregate Reserva {
        Entity Reserva {
            aggregateRoot

            -ReservaId id
            ProdutoId produto
            EstoqueId estoque
            PedidoId pedido
            double quantidadeReservada
            StatusReserva status
            LocalDateTime dataHora
        }

        ValueObject ReservaId {
            int id
        }

        Enum StatusReserva {
            ATIVA,
            LIBERADA
        }

        Repository ReservaRepository {
            List<Reserva> findAtivas()
            void save(Reserva reserva)
        }

        Service ReservaService {
            void reservarProduto(ProdutoId produto, EstoqueId estoque, PedidoId pedido, double quantidade)
            void liberarReserva(ReservaId id)
        }
    }
}
