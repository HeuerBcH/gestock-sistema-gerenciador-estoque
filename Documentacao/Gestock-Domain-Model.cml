Domain Gestock {
	Subdomain Principal
}

ContextMap {
	contains Principal
}

BoundedContext Principal implements Principal {

	Aggregate Cliente {
		Entity Cliente {
			aggregateRoot

			-ClienteId id
			String nome
			String email

			Repository ClienteRepositorio {
				@Cliente obter(@ClienteId id);
				List<@Cliente> listarTodos();
			}
		}

		ValueObject ClienteId {
			Long id
		}

		Service ClienteServico {
			@Cliente registrar(String nome, String email);
			void atualizar(@ClienteId id, String nome, String email);
		}
	}

	Aggregate Estoque {
		Entity Estoque {
			aggregateRoot

			-EstoqueId id
			String nome
			String endereco
			int capacidadeMaxima
			boolean ativo
			-ClienteId clienteId
			List<SaldoProduto> saldos

			Repository EstoqueRepositorio {
				@Estoque obter(@EstoqueId id);
				List<@Estoque> listarTodos();
				List<@Estoque> listarPorCliente(@ClienteId clienteId);
			}
		}

		Entity Movimentacao {
			-MovimentacaoId id
			-EstoqueId estoqueId
			-ProdutoId produtoId
			int quantidade
			TipoMovimentacao tipo
			Date data
		}

		Entity SaldoProduto {
			-ProdutoId produtoId
			int saldoAtual
		}

		Entity ReservaRegistro {
			-ProdutoId produtoId
			int quantidade
			Date dataHora
			String tipo // RESERVA ou LIBERACAO
		}

		Entity Transferencia {
			-TransferenciaId id
			-ProdutoId produtoId
			-EstoqueId estoqueOrigemId
			-EstoqueId estoqueDestinoId
			int quantidade
			Date dataHora
			String responsavel
			String motivo nullable
		}

		ValueObject EstoqueId {
			Long id
		}

		ValueObject MovimentacaoId {
			Long id
		}

		ValueObject TransferenciaId {
			Long id
		}

		Enum TipoMovimentacao {
			ENTRADA, SAIDA
		}

		Service EstoqueServico {
			void registrarMovimentacao(@EstoqueId id, @ProdutoId produto, int quantidade, TipoMovimentacao tipo);
			int obterSaldo(@EstoqueId id, @ProdutoId produto);
			void transferir(@EstoqueId origem, @EstoqueId destino, @ProdutoId produto, int quantidade);
			List<@Transferencia> listarTransferencias(@EstoqueId id);
			void reservar(@EstoqueId id, @ProdutoId produto, int quantidade);
			void liberarReserva(@EstoqueId id, @ProdutoId produto, int quantidade);
			void consumirReservaComoSaida(@EstoqueId id, @ProdutoId produto, int quantidade);
		}
	}

	Aggregate Produto {
		Entity Produto {
			aggregateRoot

			-ProdutoId id
			CodigoProduto codigo
			String nome
			String unidadeMedida
			boolean perecivel
			boolean ativo
			LoteValidade lote nullable
			ROP rop nullable

			Repository ProdutoRepositorio {
				@Produto obter(@ProdutoId id);
				List<@Produto> listarTodos();
			}
		}

		ValueObject ProdutoId {
			Long id
		}

		ValueObject CodigoProduto {
			String codigo
		}

		ValueObject LoteValidade {
			String numero
			Date validade
		}

		ValueObject ROP {
			double consumoMedio
			int leadTimeDias
			int estoqueSeguranca
			int valorROP
		}

		Service ProdutoServico {
			void definirROP(@ProdutoId id, double consumoMedio, int leadTimeDias, int estoqueSeguranca);
			void registrarLote(@ProdutoId id, String numero, Date validade);
			void calcularROPAutomatico(@ProdutoId id); // Usa histórico 90 dias e default do cliente quando necessário
		}
	}

	Aggregate Fornecedor {
		Entity Fornecedor {
			aggregateRoot

			-FornecedorId id
			String nome
			String cnpj
			String contato
			LeadTime leadTimeMedio
			boolean ativo
			List<Cotacao> cotacoes

			Repository FornecedorRepositorio {
				@Fornecedor obter(@FornecedorId id);
				List<@Fornecedor> listarTodos();
			}
		}

		Entity Cotacao {
			-CotacaoId id
			-ProdutoId produtoId
			double preco
			int prazoDias
			boolean validadeAtiva
		}

		ValueObject FornecedorId {
			Long id
		}

		ValueObject CotacaoId {
			Long id
		}

		ValueObject LeadTime {
			int dias
		}

		Service FornecedorServico {
			void registrarCotacao(@FornecedorId id, @ProdutoId produto, double preco, int prazoDias);
			@Cotacao obterMelhorCotacao(@FornecedorId id);
			@Cotacao selecionarMelhorCotacaoEntreFornecedores(List<@Fornecedor> fornecedores, @ProdutoId produtoId);
		}
	}

	Aggregate Pedido {
		Entity Pedido {
			aggregateRoot

			-PedidoId id
			-FornecedorId fornecedorId
			-ClienteId clienteId
			List<ItemPedido> itens
			CustoPedido custo
			StatusPedido status
			Date dataCriacao
			Date dataEntrega nullable
			Date dataPrevistaEntrega nullable
			-EstoqueId estoqueId nullable

			Repository PedidoRepositorio {
				@Pedido obter(@PedidoId id);
				List<@Pedido> listarPendentes();
				List<@Pedido> listarPorFornecedor(@FornecedorId fornecedorId);
				List<@Pedido> listarPorCliente(@ClienteId clienteId);
			}
		}

		Entity ItemPedido {
			-ProdutoId produtoId
			int quantidade
			BigDecimal precoUnitario
		}

		ValueObject PedidoId {
			Long id
		}

		ValueObject CustoPedido {
			BigDecimal total
			BigDecimal frete
			BigDecimal custoLogistico
		}

		Enum StatusPedido {
			CRIADO, ENVIADO, EM_TRANSPORTE, RECEBIDO, CANCELADO, CONCLUIDO
		}

		Service PedidoServico {
			@Pedido criar(@ClienteId cliente, @FornecedorId fornecedor, List<ItemPedido> itens);
			void registrarEntrada(@PedidoId id);
			void agruparPorFornecedor(List<@Pedido> pedidos);
			void cancelar(@PedidoId id);
			@Pedido criarParaEstoque(@ClienteId cliente, @FornecedorId fornecedor, List<ItemPedido> itens, @EstoqueId estoqueId);
			void cancelarComLiberacao(@PedidoId id);
		}
	}

	Aggregate Alerta {
		Entity Alerta {
			aggregateRoot

			-AlertaId id
			-ProdutoId produtoId
			-EstoqueId estoqueId
			-FornecedorId fornecedorSugerido nullable
			Date dataGeracao
			boolean ativo

			Repository AlertaRepositorio {
				@Alerta obter(@AlertaId id);
				List<@Alerta> listarAtivos();
				List<@Alerta> listarPorProduto(@ProdutoId produtoId);
				List<@Alerta> listarPorEstoque(@EstoqueId estoqueId);
			}
		}

		ValueObject AlertaId {
			Long id
		}

		Service AlertaServico {
			@Alerta gerarAlerta(@ProdutoId produtoId, @EstoqueId estoqueId, @FornecedorId fornecedorSugerido);
			void desativarAlerta(@AlertaId id);
		}
	}
}
