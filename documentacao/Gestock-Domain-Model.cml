Domain Gestock {
    Subdomain Principal
}

ContextMap {
    contains Principal
}

BoundedContext Principal implements Principal {

    Aggregate Cliente {
        Entity Cliente {
            aggregateRoot

            -ClienteId id
            String nome
            String email
            String cnpj
            boolean ativo
            List<EstoqueId> estoques
        }

        ValueObject ClienteId {
            int id
        }

        Repository ClienteRepository {
            Cliente findById(ClienteId id)
            List<Cliente> findAll()
            void save(Cliente cliente)
        }

        Service ClienteService {
            void cadastrarCliente(String nome, String email, String cnpj)
            void ativarCliente(ClienteId id)
            void desativarCliente(ClienteId id)
        }
    }

    Aggregate Estoque {
        Entity Estoque {
            aggregateRoot

            -EstoqueId id
            String nome
            String endereco
            double capacidadeMaxima
            boolean ativo
            ClienteId cliente
            List<ProdutoEstoque> produtos
        }

        ValueObject EstoqueId {
            int id
        }

        ValueObject ProdutoEstoque {
            ProdutoId produto
            double quantidade
        }

        ValueObject SaldoProduto {
            ProdutoId produto
            double quantidadeDisponivel
            double quantidadeReservada
            double quantidadeTotal
        }

        Repository EstoqueRepository {
            Estoque findById(EstoqueId id)
            List<Estoque> findByCliente(ClienteId clienteId)
            void save(Estoque estoque)
        }

        Service EstoqueService {
            void registrarProduto(EstoqueId id, ProdutoId produto, double quantidade)
            void atualizarCapacidade(EstoqueId id, double novaCapacidade)
            void desativarEstoque(EstoqueId id)
            void adicionarPedidoPendente(EstoqueId id, PedidoId pedido)
            void removerPedidoPendente(EstoqueId id, PedidoId pedido)
            boolean validarCapacidade(EstoqueId id, double quantidade)
            double calcularCapacidadeOcupada(EstoqueId id)
        }
    }

    Aggregate Fornecedor {
        Entity Fornecedor {
            aggregateRoot

            -FornecedorId id
            String nome
            String cnpj
            String contato
            int leadTime // em dias
            boolean ativo
            List<Cotacao> cotacoes
        }

        ValueObject FornecedorId {
            int id
        }

        ValueObject Cotacao {
            -CotacaoId id
            ProdutoId produto
            double preco
            LocalDate validade
        }

        ValueObject CotacaoId {
            int id
        }

        ValueObject LeadTime {
            int dias
        }

        Repository FornecedorRepository {
            Fornecedor findById(FornecedorId id)
            List<Fornecedor> findAllAtivos()
            void save(Fornecedor fornecedor)
        }

        Service FornecedorService {
            void atualizarCotacao(FornecedorId fornecedor, ProdutoId produto, double preco, LocalDate validade)
            void desativarFornecedor(FornecedorId id)
            Cotacao selecionarCotacaoMaisVantajosa(ProdutoId produto, List<Cotacao> cotacoes)
        }
    }

    Aggregate Produto {
        Entity Produto {
            aggregateRoot

            -ProdutoId id
            String codigo
            String nome
            String descricao
            String unidadeMedida
            boolean ativo
            List<EstoqueId> estoques
            List<FornecedorId> fornecedores
            double pontoRessuprimento
            List<PedidoId> pedidosPendentes
        }

        ValueObject ProdutoId {
            int id
        }

        ValueObject CodigoProduto {
            String codigo
        }

        ValueObject ROP {
            double consumoMedioDiario
            int leadTimeDias
            double estoqueSeguranca
            double valorROP
        }

        Repository ProdutoRepository {
            Produto findById(ProdutoId id)
            Produto findByCodigo(String codigo)
            List<Produto> findAll()
            List<Produto> findByEstoque(EstoqueId estoqueId)
            void save(Produto produto)
        }

        Service ProdutoService {
            void definirPontoRessuprimento(ProdutoId id, double novoPonto)
            void vincularFornecedor(ProdutoId id, FornecedorId fornecedor)
            void adicionarEstoque(ProdutoId id, EstoqueId estoque)
            void removerEstoque(ProdutoId id, EstoqueId estoque)
            void adicionarPedidoPendente(ProdutoId id, PedidoId pedido)
            void removerPedidoPendente(ProdutoId id, PedidoId pedido)
        }
    }

    Aggregate Pedido {
        Entity Pedido {
            aggregateRoot

            -PedidoId id
            ClienteId cliente
            FornecedorId fornecedor
            LocalDate dataCriacao
            LocalDate dataPrevistaEntrega
            PedidoStatus status
            List<ItemPedido> itens
        }

        ValueObject PedidoId {
            int id
        }

        ValueObject ItemPedido {
            ProdutoId produto
            double quantidade
            double precoUnitario
        }

        ValueObject CustoPedido {
            double valorTotal
            double valorFrete
            double valorDesconto
            double valorFinal
        }

        Enum PedidoStatus {
            PENDENTE,
            EM_TRANSPORTE,
            RECEBIDO,
            CANCELADO
        }

        Repository PedidoRepository {
            Pedido findById(PedidoId id)
            List<Pedido> findByStatus(PedidoStatus status)
            void save(Pedido pedido)
        }

        Service PedidoService {
            void criarPedido(ClienteId cliente, FornecedorId fornecedor, List<ItemPedido> itens)
            void atualizarStatus(PedidoId id, PedidoStatus status)
            void cancelarPedido(PedidoId id)
            void confirmarRecebimento(PedidoId id)
            void definirDataPrevistaEntrega(PedidoId id, LocalDate dataPrevista)
        }
    }

    Aggregate Movimentacao {
        Entity Movimentacao {
            aggregateRoot

            -MovimentacaoId id
            ProdutoId produto
            EstoqueId estoque
            LocalDateTime dataHora
            TipoMovimentacao tipo
            double quantidade
            String motivo
        }

        ValueObject MovimentacaoId {
            int id
        }

        Enum TipoMovimentacao {
            ENTRADA,
            SAIDA
        }

        Repository MovimentacaoRepository {
            void save(Movimentacao movimentacao)
            List<Movimentacao> findByProduto(ProdutoId produto)
        }

        Service MovimentacaoService {
            void registrarEntrada(ProdutoId produto, EstoqueId estoque, double quantidade, String motivo)
            void registrarSaida(ProdutoId produto, EstoqueId estoque, double quantidade, String motivo)
            Movimentacao criarMovimentacao(ProdutoId produto, EstoqueId estoque, TipoMovimentacao tipo, double quantidade, String motivo)
        }
    }

    Aggregate Alerta {
        Entity Alerta {
            aggregateRoot

            -AlertaId id
            ProdutoId produto
            EstoqueId estoque
            FornecedorId fornecedorSugerido
            double quantidadeAtual
            double pontoRessuprimento
            boolean ativo
            LocalDateTime dataGeracao
        }

        ValueObject AlertaId {
            int id
        }

        Repository AlertaRepository {
            List<Alerta> findAtivos()
            void save(Alerta alerta)
        }

        Service AlertaService {
            void gerarAlerta(ProdutoId produto, EstoqueId estoque, double quantidadeAtual, double pontoRessuprimento, FornecedorId fornecedorSugerido)
            void resolverAlerta(AlertaId id)
            List<Alerta> buscarAlertasAtivos()
            boolean verificarEstoqueBaixo(double quantidadeAtual, double pontoRessuprimento)
        }
    }

    Aggregate Transferencia {
        Entity Transferencia {
            aggregateRoot

            -TransferenciaId id
            ProdutoId produto
            EstoqueId origem
            EstoqueId destino
            double quantidade
            LocalDateTime dataHora
            StatusTransferencia status
            ClienteId cliente
        }

        ValueObject TransferenciaId {
            int id
        }

        Enum StatusTransferencia {
            PENDENTE,
            CONCLUIDA
        }

        Repository TransferenciaRepository {
            void save(Transferencia transferencia)
            List<Transferencia> findByStatus(StatusTransferencia status)
        }

        Service TransferenciaService {
            void iniciarTransferencia(EstoqueId origem, EstoqueId destino, ProdutoId produto, double quantidade, ClienteId cliente)
            void concluirTransferencia(TransferenciaId id)
            boolean validarTransferencia(EstoqueId origem, EstoqueId destino, ClienteId cliente)
            void gerarMovimentacoesTransferencia(TransferenciaId id)
        }
    }

    Aggregate Reserva {
        Entity Reserva {
            aggregateRoot

            -ReservaId id
            ProdutoId produto
            EstoqueId estoque
            PedidoId pedido
            double quantidadeReservada
            StatusReserva status
            LocalDateTime dataHora
        }

        ValueObject ReservaId {
            int id
        }

        Enum StatusReserva {
            ATIVA,
            LIBERADA
        }

        Repository ReservaRepository {
            List<Reserva> findAtivas()
            void save(Reserva reserva)
        }

        Service ReservaService {
            void reservarProduto(ProdutoId produto, EstoqueId estoque, PedidoId pedido, double quantidade)
            void liberarReserva(ReservaId id)
            void liberarReservasPorPedido(PedidoId pedidoId)
            List<Reserva> buscarReservasAtivas()
            double calcularSaldoDisponivel(ProdutoId produto, EstoqueId estoque)
        }
    }
}
